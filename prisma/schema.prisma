generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// enum Role {
//   ADMIN
//   USER
// }

model User {
  id    String @id @default(cuid())
  fName String
  lName String
  // userRole Role   @default(USER)

  // RELATIONS
  // 1 - 1
  car     Car?
  // 1 - m
  carBlog CarBlog[]

  // SELF RELATION ( can be 1-1, 1-m, m-m)
  friendId String? @unique
  friend   User?   @relation("Friend", fields: [friendId], references: [id])
  friendOf User?   @relation("Friend")

  // INDEX FIELDS 
  @@index([fName, lName], name: "fName-lName")
}

model Car {
  id    String  @id @default(cuid())
  brand String
  color String
  sold  Boolean @default(false)

  // RELATIONS
  // 1 - 1 
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

// EXPLICIT MANY TO MANY RELATION
model CarBlog {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // RELATIONS
  // 1 - m
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  //  m - m
  categories CarCategory[]
}

model Categories {
  id       String        @id @default(cuid())
  name     String
  carBlogs CarCategory[]
  // RELATION
  //  m - m
}

model CarCategory {
  carBlogId  String
  carBlog    CarBlog    @relation(fields: [carBlogId], references: [id])
  categoryId String
  catogory   Categories @relation(fields: [carBlogId], references: [id])
  createdAt  DateTime   @default(now())
  assignedBy String

  @@id([carBlogId, categoryId])
}

//  IMPLICIT MANY TO MANY RELATION
// model CarBlog {
//   id        String   @id @default(cuid())
//   content   String
//   createdAt DateTime @default(now())

//   // RELATIONS
//   // 1 - m
//   userId String
//   user   User   @relation(fields: [userId], references: [id])

//   //  m - m
//   categories Categories[]
// }

// model Categories {
//   id       String    @id @default(cuid())
//   name     String
//   carBlogs CarBlog[]
//   // RELATION
//   //  m - m
// }
